<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BC.BaseContext</name>
    </assembly>
    <members>
        <member name="T:BC.BaseContext.Abstract.IDbContext">
            <summary>
            数据库执行接口
            </summary>
        </member>
        <member name="M:BC.BaseContext.Abstract.IDbContext.ExecuteNonQuery(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            执行insert,update,delete
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:BC.BaseContext.Abstract.IDbContext.ExecuteScalar(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            得到数据库中表中第一行第一列的值
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:BC.BaseContext.Abstract.IDbContext.ExecuteDataTable(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            用DataReader返回DataTable
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>返回DataTable数据</returns>
        </member>
        <member name="M:BC.BaseContext.Abstract.IDbContext.ExecuteReader(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            返回DataReader
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>返回DataReader对象</returns>
        </member>
        <member name="M:BC.BaseContext.Abstract.IDbContext.ExecuteDataSet(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            用DataAdapater返回DataSet
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>返回DataSet数据</returns>
        </member>
        <member name="P:BC.BaseContext.Abstract.IDbContext.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="T:BC.BaseContext.Attribute.ColumnAttribute">
            <summary>
            Mapping数据库中表对应的列名
            </summary>
        </member>
        <member name="M:BC.BaseContext.Attribute.ColumnAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="column"></param>
        </member>
        <member name="P:BC.BaseContext.Attribute.ColumnAttribute.Column">
            <summary>
            用于类中的属性
            </summary>
        </member>
        <member name="T:BC.BaseContext.Attribute.DbFieldAttribute">
            <summary>
            mapping数据库中的表中的字段
            </summary>
        </member>
        <member name="P:BC.BaseContext.Attribute.DbFieldAttribute.DbFieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:BC.BaseContext.Attribute.DbFieldAttribute.DbType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:BC.BaseContext.Attribute.DbFieldAttribute.DbIsNull">
            <summary>
            字段是否为空（false：不为空；true：为空；）
            </summary>
        </member>
        <member name="P:BC.BaseContext.Attribute.DbFieldAttribute.DbDefault">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:BC.BaseContext.Attribute.DbFieldAttribute.DbRemark">
            <summary>
            字段描述
            </summary>
        </member>
        <member name="P:BC.BaseContext.Attribute.DbFieldAttribute.DbIsPK">
            <summary>
            字段是否主键（false：不是主键；true：为主键；）
            </summary>
        </member>
        <member name="P:BC.BaseContext.Attribute.DbFieldAttribute.DbOp">
            <summary>
            Db操作对象（Insert;Update;All;）（默认值：DbOp.All）
            </summary>
        </member>
        <member name="T:BC.BaseContext.Attribute.DbOp">
            <summary>
            Db操作对象（Insert;Update;All;）
            </summary>
        </member>
        <member name="F:BC.BaseContext.Attribute.DbOp.All">
            <summary>
            All(0):Insert、Update、Delete都适用(默认值)
            </summary>
        </member>
        <member name="F:BC.BaseContext.Attribute.DbOp.Insert">
            <summary>
            Insert(1):Insert语句适用
            </summary>
        </member>
        <member name="F:BC.BaseContext.Attribute.DbOp.Update">
            <summary>
            Update(2):Update语句适用
            </summary>
        </member>
        <member name="T:BC.BaseContext.Attribute.TableAttribute">
            <summary>
            mapping数据库中的表
            </summary>
        </member>
        <member name="P:BC.BaseContext.Attribute.TableAttribute.TableName">
            <summary>
            用于类
            </summary>
        </member>
        <member name="T:BC.BaseContext.Common.AdUserAccount">
            <summary>
            Ad域用户帐户
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.AdUserAccount.#ctor">
            <summary>
            Ad域用户帐户-构造函数
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.AdUserAccount.GetCurrentDomainLoginName(System.String@,System.String@)">
            <summary>
            获取当前Ad域账号
            </summary>
            <param name="domainName">返回 域名称</param>
            <param name="userLoginName">返回 域用户账号</param>
            <returns>返回 域+用户账号(BC\\liyu)；反之，返回 string.Empty</returns>
        </member>
        <member name="M:BC.BaseContext.Common.AdUserAccount.IsAdUserAccount(System.String)">
            <summary>
            根据某个用户账号来确认是否已经登录Ad域
            </summary>
            <param name="userLoginName">需要验证的Ad域帐号</param>
            <returns>true：已经登录Ad域；false：未登录到Ad域（或者不是域帐户）；</returns>
        </member>
        <member name="M:BC.BaseContext.Common.AdUserAccount.GetDirectoryObject">
            <summary>
            根据用户获得域对象
            </summary>
            <returns>获取域实体对象</returns>
        </member>
        <member name="P:BC.BaseContext.Common.AdUserAccount.DomainAddress">
            <summary>
            域服务器地址(ip地址)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.AdUserAccount.DomainAdmin">
            <summary>
            域管理帐号
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.AdUserAccount.DomainAdminPwd">
            <summary>
            域管理账号密码
            </summary>
        </member>
        <member name="T:BC.BaseContext.Common.CacheHelper">
            <summary>
            服务器缓存帮助类
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.CacheHelper.InsertFile(System.String,System.Object,System.String)">
            <summary>
            创建缓存项的文件依赖
            </summary>
            <param name="key">缓存Key</param>
            <param name="obj">object对象</param>
            <param name="fileName">文件绝对路径</param>
        </member>
        <member name="M:BC.BaseContext.Common.CacheHelper.Insert(System.String,System.Object,System.Int32)">
            <summary>
            创建缓存项过期
            </summary>
            <param name="key">缓存Key</param>
            <param name="obj">object对象</param>
            <param name="expires">设置时间</param>
        </member>
        <member name="M:BC.BaseContext.Common.CacheHelper.IsExist(System.String)">
            <summary>
            判断缓存对象是否存在
            </summary>
            <param name="strKey">缓存键值名称</param>
            <returns>是否存在true 、false</returns>
        </member>
        <member name="M:BC.BaseContext.Common.CacheHelper.GetCache(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="key">缓存Key</param>
            <returns>object对象</returns>
        </member>
        <member name="M:BC.BaseContext.Common.CacheHelper.Get``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="T">T对象</typeparam>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.CacheHelper.RemoveAllCache(System.String)">
            <summary>
            移除指定数据缓存
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.CacheHelper.RemoveAllCache">
            <summary>
            移除全部缓存
            </summary>
        </member>
        <member name="T:BC.BaseContext.Common.CookieHelper">
            <summary>
            Cookie帮助类
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.CookieHelper.WriteCookie(System.String,System.String)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="strValue">值</param>
        </member>
        <member name="M:BC.BaseContext.Common.CookieHelper.WriteCookie(System.String,System.String,System.Int32)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="strValue">值</param>
            <param name="expires">过期时间(分钟)</param>
        </member>
        <member name="M:BC.BaseContext.Common.CookieHelper.GetCookie(System.String)">
            <summary>
            读cookie值
            </summary>
            <param name="strName">名称</param>
            <returns>cookie值</returns>
        </member>
        <member name="T:BC.BaseContext.Common.ConcurrentLinkedQueue`1">
            <summary>
            无锁队列（先进先出）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BC.BaseContext.Common.ConcurrentLinkedQueue`1.#ctor">
            <summary>
            无锁队列（先进先出）-构造函数
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.ConcurrentLinkedQueue`1.Enqueue(`0)">
            <summary>
            【进】队列
            </summary>
            <param name="item">【进】队列对象</param>
        </member>
        <member name="M:BC.BaseContext.Common.ConcurrentLinkedQueue`1.TryDequeue(`0@)">
            <summary>
            【出】队列
            </summary>
            <param name="result">【出】队列对象</param>
            <returns>成功：true；失败：false；</returns>
        </member>
        <member name="P:BC.BaseContext.Common.ConcurrentLinkedQueue`1.IsEmpty">
            <summary>
            获取-队列是否为空
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.ConcurrentLinkedQueue`1.Count">
            <summary>
            获取-队列数量
            </summary>
        </member>
        <member name="T:BC.BaseContext.Common.HandlerBase">
            <summary>
            HandlerBase
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.HandlerBase.httpContext">
            <summary>
            HttpContext httpContext
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.HandlerBase.ProcessRequestBase(System.Web.HttpContext)">
            <summary>
            启动(无参)
            </summary>
            <param name="context">context</param>
        </member>
        <member name="M:BC.BaseContext.Common.HandlerBase.ProcessRequestBase(System.Web.HttpContext,System.Object[])">
            <summary>
            启动(有参)
            </summary>
            <param name="context">context</param>
            <param name="arryObj">参数集合new object[] { workFlowInfo, currentOpinionAndStepUserInfo }</param>
        </member>
        <member name="P:BC.BaseContext.Common.HandlerBase.IsReusable">
            <summary>
            获取-是否重复使用
            </summary>
        </member>
        <member name="T:BC.BaseContext.Common.DA">
            <summary>
            DA文件属性对象信息
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.DA.Server">
            <summary>
            数据库服务器名称(默认值：string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.DA.DataBase">
            <summary>
            数据库名称(默认值：string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.DA.Uid">
            <summary>
            访问数据库的账号(sa)(默认值：string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.DA.Pwd">
            <summary>
            访问数据库的密码(默认值：string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.DA.Others">
            <summary>
            其他参数(默认值：string.Empty)
            </summary>
        </member>
        <member name="T:BC.BaseContext.Common.JsonHelper2Base">
            <summary>
            Net2.0 JSON数据转换
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.ObjectToJson(System.Object)">
            <summary>
            一个对象 转换成 Json字符串
            </summary>
            <param name="obj">object对象</param>
            <returns>return JsonString</returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.JsonToObject(System.String,System.Object)">
            <summary>
            Json字符串 转换成 一个对象（此函数有问题）
            Pri_WebRecordEntity webRecord1 = (Pri_WebRecordEntity)new JsonHelper.JsonHelper2().JsonToObject(jsonString, typeof(Pri_WebRecordEntity));
            </summary>
            <param name="jsonString">JsonString</param>
            <param name="obj">object对象</param>
            <returns>return object对象</returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.JsonToObject2``1(System.String)">
            <summary>
            *Json字符串 转换成 实例对象（用这种方式）
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="jsonString">JSON字符串</param>
            <returns>return 实例对象（当jsonString为空时，则返回对象null）</returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.JsonToObject``1(System.String)">
            <summary>
            Json字符串 转换成 一个List[对象]
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="jsonString">JSON字符串</param>
            <returns>return List[T]</returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.JsonToDataTable(System.String)">
            <summary>
            备注：此函数针对时间格式为：yyyy-MM-dd HH:mm:ss 有误
            根据Json返回DateTable,JSON数据格式如:           
            {table:[{column1:1,column2:2,column3:3},{column1:1,column2:2,column3:3}]}           
            </summary>     
            <param name="jsonString">JsonString</param>
            <returns>return DataTable</returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.DataTableToJson(System.Data.DataTable)">
            <summary>
            DataTable 转换成 JsonString(特殊字符加密)
            </summary>
            <param name="dt">DataTable</param>
            <returns>return JsonString</returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.DataTableToJson(System.Data.DataTable,System.String[])">
            <summary>
            DataTable 转换成 JsonString(特殊字符加密)
            </summary>
            <param name="dt">DataTable</param>
            <param name="decryptionColumns">不要加密的字符(Id,CreateDate)</param>
            <returns>return JsonString</returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.DataTableToJson(System.Data.DataTable,System.Boolean)">
            <summary>
            DataTable 转换成 JsonString
            </summary>
            <param name="dt">DataTable</param>
            <param name="isEncryption">是否特殊字符加密（true：加密；false：不加密；）</param>
            <returns>return JsonString</returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.EnumTypeToJson(System.Type,System.String)">
            <summary>
            通过枚举 转换成 JsonString 值为枚举的索引
            </summary>
            <param name="enumType">枚举对象</param>
            <param name="alias">别名</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.EnumTypeToJson(System.Type)">
            <summary>
            通过枚举 转换成 JsonString 值为枚举的键名
            </summary>
            <param name="enumType">枚举对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.JsonToDataSet(System.String)">
            <summary>
            将JSON解析成DataSet只限标准的JSON数据
            例如：Json＝{t1:[{name:'数据name',type:'数据type'}]} 或 Json＝{t1:[{name:'数据name',type:'数据type'}],t2:[{id:'数据id',gx:'数据gx',val:'数据val'}]}
            </summary>
            <param name="Json">Json字符串</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.DataSetToJson(System.Data.DataSet)">
            <summary>
            将DataSet转化成JSON数据
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.JsonHelper2Base.DataSetToJson2(System.Data.DataSet)">
            <summary>
            将DataSet转化成JSON数据 重新组合：有FieldKey和FieldValue，可以不用
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="T:BC.BaseContext.Common.LoggerContext">
            <summary>
            日志操作类（日志默认目录为Log目录）
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.LoggerContext.logPath">
            <summary>
            日志路径
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.LoggerContext.Write(System.String,System.String)">
            <summary>
            写出日志信息 
            </summary>
            <param name="folderName">Log目录下的文件夹名称（空字符串：Log目录下；有字符串：Log\字符串）</param>
            <param name="message">日志内容</param>
        </member>
        <member name="T:BC.BaseContext.Common.WritingLogger">
            <summary>
            编写日志类(.txt)
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.WritingLogger.WritingLogs(System.String,System.String)">
            <summary>
            写出异常日志(.txt)
            </summary>
            <param name="strPath">保存路径 —— 
            异常信息保存的路径 —— 
            private readonly string logPath = string.Format(@"{0}Log\appException\", AppDomain.CurrentDomain.BaseDirectory);</param>
            <param name="strContent">错误内容</param>
            <returns>true：写出正确；反之，false；</returns>
        </member>
        <member name="T:BC.BaseContext.Common.LoggerContext2">
            <summary>
            日志操作类（日志默认目录为Log目录）【单例模式】
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.LoggerContext2._instance">
            <summary>
            声明一个已经是否声明自身类的对象
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.LoggerContext2.lockHelper">
            <summary>
            锁
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.LoggerContext2.#ctor">
            <summary>
            日志操作类（日志默认目录为Log目录）【单例模式】-构造函数
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.LoggerContext2.CreateInstance">
            <summary>
            创建单实例（函数方式）
            </summary>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.LoggerContext2.Write(System.String,System.String)">
            <summary>
            写出日志信息 目录地址：string logPath = AppDomain.CurrentDomain.BaseDirectory + "!00_Log\\";
            </summary>
            <param name="folderName">Log目录下的文件夹名称（空字符串：Log目录下；有字符串：Log\字符串）</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:BC.BaseContext.Common.LoggerContext2.Write(System.String,System.String,System.String)">
            <summary>
            写出日志信息 目录地址：string logPath = "C:\\!00_Log\\";
            </summary>
            <param name="path">自定义目录地址（最后加\\ 如:C:\\!OcSyncLog\\）</param>
            <param name="folderName">Log目录下的文件夹名称（空字符串：Log目录下；有字符串：Log\字符串）</param>
            <param name="message">日志内容</param>
        </member>
        <member name="P:BC.BaseContext.Common.LoggerContext2.CreateInstance2">
            <summary>
            创建单实例（属性方式）
            </summary>
            <returns></returns>
        </member>
        <member name="T:BC.BaseContext.Common.PrimaryKey">
            <summary>
            生成主键类
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.PrimaryKey.lastIdentity">
            <summary>
            最后一次存储的Id值
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.PrimaryKey.primaryKey">
            <summary>
            本类对象
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.PrimaryKey.Guid">
            <summary>
            获取下一个Id主键（string）
            </summary>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.PrimaryKey.Id">
            <summary>
            获取下一个Id主键（long）
            </summary>
            <returns></returns>
        </member>
        <member name="P:BC.BaseContext.Common.PrimaryKey.GetInstance">
            <summary>
            对自身类进行实例化
            </summary>
        </member>
        <member name="T:BC.BaseContext.Common.ResultMessage">
            <summary>
            返回结果类（AllMessage,DebuggerSql,ErrorMessage,Status,JsonStr）
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.ResultMessage.AuthenticationMessage">
            <summary>
            获取或者设置-验证信息
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.ResultMessage.JsonStr">
            <summary>
            JsonStr（默认值:"[{}]"）
            </summary>
        </member>
        <member name="T:BC.BaseContext.Common.UserInfoBase">
            <summary>
            当前所登入系统的用户-基类
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._Lang">
            <summary>
            当前语言
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._Tkn">
            <summary>
            tkn
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._Token">
            <summary>
            token
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase.domain">
            <summary>
            域名
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserId">
            <summary>
            当前登入用户Id
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserGuid">
            <summary>
            当前登入用户Guid
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserCode">
            <summary>
            当前登入系统的用户代码
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserLoginName">
            <summary>
            当前登入系统的用户账号名称
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserRealName">
            <summary>
            当前登入系统的用户真实名称
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._SignedPhotograph">
            <summary>
            当前登入系统的用户的签名照片的二进制流
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserPassword">
            <summary>
            当前登入系统的用户密码
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserGender">
            <summary>
            用户性别
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserBirthday">
            <summary>
            用户生日
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserState">
            <summary>
            用户状态
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._DeptId">
            <summary>
            当前登入用户所在部门Id
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._DeptGuid">
            <summary>
            当前登入用户所在部门Guid
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._DeptName">
            <summary>
            当前登入用户所在部门名称
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserEmail">
            <summary>
            当前登入用户Email地址
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserTelephone">
            <summary>
            当前登入用户电话
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UserInfoBase._UserMobile">
            <summary>
            当前登入用户手机
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.Lang">
            <summary>
            获取或者设置当前语言(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.Tkn">
            <summary>
            获取或者设置Tkn(缺省值:string.Empty)【与Token的值一致】
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.Token">
            <summary>
            获取或者设置Token(缺省值:string.Empty)【与Tkn的值一致】
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.Domain">
            <summary>
            获取或者设置域名(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserId">
            <summary>
            获取或者设置当前登入用户Id(缺省值:0)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserGuid">
            <summary>
            获取或者设置当前登入用户Guid(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserCode">
            <summary>
            获取或者设置当前登入系统的用户代码（等同于UserLoginName,如果有域名的话,则值为：workgroup/liyu）(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserLoginName">
            <summary>
            获取或者设置当前登入系统的用户账号名称(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserRealName">
            <summary>
            获取或者设置当前登入系统的用户真实名称(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.SignedPhotograph">
            <summary>
            当前登入系统的用户的签名照片的二进制流(缺省值:new byte[0])
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserPassword">
            <summary>
            获取或者设置当前登入系统的用户密码(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserGender">
            <summary>
            获取或者设置用户性别(缺省值:0)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserBirthday">
            <summary>
            获取或者设置用户生日(缺省值:new DateTime(1753, 11, 11, 11, 11, 11))
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserState">
            <summary>
            获取或者设置用户状态(缺省值:0)(1:正常状态)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.DeptId">
            <summary>
            获取或者设置当前登入用户所在部门Id(缺省值:0)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.DeptGuid">
            <summary>
             获取或者设置当前登入用户所在部门Guid(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.DeptName">
            <summary>
            获取或者设置当前登入用户所在部门名称(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserEmail">
            <summary>
            获取或者设置当前登入用户Email地址(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserTelephone">
            <summary>
            获取或者设置当前登入用户电话(缺省值:string.Empty)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.UserInfoBase.UserMobile">
            <summary>
            获取或者设置当前登入用户手机(缺省值:string.Empty)
            </summary>
        </member>
        <member name="T:BC.BaseContext.Common.UtilityBase">
            <summary>
            公共函数基类
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UtilityBase.DefaultMinDateTime">
            <summary>
            默认最小时间(1753-11-11 11:11:11)
            </summary>
        </member>
        <member name="F:BC.BaseContext.Common.UtilityBase.DefaultMinDate">
            <summary>
            默认最小时间(1753-11-11)
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.EncySafeString(System.String)">
            <summary>
            加密.(@"\", "★").("'", "◎").('"', '※').("\n", "▲")
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.DisencySafeString(System.String)">
            <summary>
            解密.("★", @"\").("◎", "'").('※', '"')
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetClassName(System.Type)">
            <summary>
            获取类名
            </summary>
            <param name="type">GetType()</param>
            <returns>返回当前执行类名</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetMethodName(System.Reflection.MethodBase)">
            <summary>
            获取函数名
            </summary>
            <param name="methodbase">System.Reflection.MethodInfo.GetCurrentMethod()</param>
            <returns>返回当前执行函数名</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetExceptionMessage(System.Reflection.MethodBase,System.Exception,System.String)">
            <summary>
            获取异常信息（包括堆栈）
            </summary>
            <param name="methodBase">System.Reflection.MethodBase.GetCurrentMethod()</param>
            <param name="exception">ce</param>
            <param name="message">自定义信息（没有信息，可以为空字符串）</param>
            <returns>返回异常信息（包括堆栈）</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.UrlEncode(System.String)">
            <summary>
            URL加密（CS架构和BS架构都可以）
            </summary>
            <param name="code">需要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.TBL(System.Int32)">
            <summary>
            Tab键
            </summary>
            <param name="times">Tab键几次</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.ConvertToArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            IList《T》对象转换成数据对象
            </summary>
            <typeparam name="T">泛型参数对象</typeparam>
            <param name="list">数组对象</param>
            <returns>object[]</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.ConvertToArray``1(System.Collections.Generic.List{``0})">
            <summary>
            List《T》对象转换成数据对象
            </summary>
            <typeparam name="T">泛型参数对象</typeparam>
            <param name="list">数组对象</param>
            <returns>T[]</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetDA(BC.BaseContext.Common.ResultMessage,System.String,System.String)">
            <summary>
            获取 DA.XML 相关参数
            </summary>
            <param name="resultMessage">resultMessage</param>
            <param name="path">路径(PathConfig)</param>
            <param name="tableName">biz</param>
            <returns>获得的值</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetConfigValue(BC.BaseContext.Common.ResultMessage,System.String,System.String,System.String)">
            <summary>
            *获取XML配置信息的值
            </summary>
            <param name="resultMessage">resultMessage</param>
            <param name="path">路径(PathConfig)</param>
            <param name="tableName">配置名称</param>
            <param name="keyName">Key名称</param>
            <returns>获得的值</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetHttpDomain">
            <summary>
            获取域名（http://localhost）
            </summary>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetDomain">
            <summary>
            获取Domain（localhost）。少了http://
            </summary>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetHttpName(System.String)">
            <summary>
            获取协议名称（http:// 或者 https://）
            </summary>
            <param name="fullUrlName">网站上的完整地址</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetWebConfigValue(System.String)">
            <summary>
            根据传入的Key获取配置文件(WebConfig)中的Value值
            </summary>
            <param name="Key">键值</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetWebConfigConnectionString(System.String)">
            <summary>
            根据传入的Key获取配置文件(WebConfig)中的connectionString值
            </summary>
            <param name="Key">键值</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetFileStream(System.String)">
            <summary>
            1. 通过文件路径来读取文件 Stream
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.StreamToBytes(System.IO.Stream)">
            <summary>
            1.2 将 Stream 转成 byte[]
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetDomainUserName(System.String,System.String)">
            <summary>
            获取域用户(workgroup/liyu)
            </summary>
            <param name="domain">域名</param>
            <param name="loginName">登录名称</param>
            <returns>有域则返回带域的登录名称；反之，没有域的登录名称</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetUserName(System.String)">
            <summary>
            获取用户名称(workgroup/liyu) -> liyu 去掉域名称
            </summary>
            <param name="domainLoginName">由域的登录名称</param>
            <returns>返回没有域的登录名称</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.RequestQueryString(System.Web.HttpContext,System.String,System.String)">
            <summary>
            *获取尾巴后面的字符串值
            1. UtilityBase.RequestQueryString(context, "token", "");
            2. UtilityBase.RequestQueryString(HttpContext.Current, "token", "");
            </summary>
            <param name="context">HttpContext对象</param>
            <param name="key">键值</param>
            <param name="defaultValue">找不到的默认值（如："","0"）</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.GetLangVal(System.String,System.String,System.String,System.String)">
            <summary>
             获取语言值
             进行XML文件依赖缓存
            </summary>
            <param name="path">XML提示文件路径</param>
            <param name="language">语言（Chinese,English等）</param>
            <param name="key">节点键名（MainTip,AlertTip等）</param>
            <param name="tipId">XML文件中ID节点</param>
            <returns>提示信息</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.EnumParse``1(System.String)">
            <summary>
            通过枚举值的字符串获得相同的枚举对象
            </summary>
            <typeparam name="T">枚举对象</typeparam>
            <param name="enumValue">枚举相同的字符串</param>
            <returns>获得相同的枚举对象</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.ArrayJoin2Dot(System.String[])">
            <summary>
            根据字符串数组拼接成含,号的字符串
            </summary>
            <param name="array">字符串数组</param>
            <returns>返回拼接成含,号的字符串</returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.StepLabelFormat(System.String)">
            <summary>
            格式化下 节点名称（把空格及.替换成_）
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.SerializeObject(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="pObj">对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Common.UtilityBase.DeserializeObject(System.Byte[])">
            <summary>
            反序列化成对象
            </summary>
            <param name="pBytes">二进制流</param>
            <returns></returns>
        </member>
        <member name="T:BC.BaseContext.Common.Lang">
            <summary>
            语言实体类(如果语言增加，一定要修改这里)
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.Lang.Chinese">
            <summary>
            1.国语
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.Lang.English">
            <summary>
            2.英语
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.Lang.Taiwanese">
            <summary>
            3.台湾语
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.Lang.Japanese">
            <summary>
            4.日语
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.Lang.Korean">
            <summary>
            5.韩语
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.Lang.French">
            <summary>
            6.法语
            </summary>
        </member>
        <member name="P:BC.BaseContext.Common.Lang.Italian">
            <summary>
            7.意大利
            </summary>
        </member>
        <member name="T:BC.BaseContext.Common.WebManagerBase">
            <summary>
            Web管理JS效果的提示框
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.WebManagerBase.Show(System.Web.UI.Page,System.String)">
            <summary>
            显示消息提示对话框
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:BC.BaseContext.Common.WebManagerBase.ShowConfirm(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击 消息确认提示框
            </summary>
            <param name="control">根据页面控件添加确认控件js属性来控制confirm框</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:BC.BaseContext.Common.WebManagerBase.ShowAndRedirect(System.Web.UI.Page,System.String,System.String)">
            <summary>
            显示消息提示对话框，并进行页面跳转
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url">跳转的目标URL</param>
        </member>
        <member name="M:BC.BaseContext.Common.WebManagerBase.ResponseScript(System.Web.UI.Page,System.String)">
            <summary>
            输出自定义脚本信息
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="script">输出脚本</param>
        </member>
        <member name="T:BC.BaseContext.Common.WritingFile">
            <summary>
            写文件类
            </summary>
        </member>
        <member name="M:BC.BaseContext.Common.WritingFile.#ctor(System.Boolean)">
            <summary>
            写文件-构造函数
            </summary>
            <param name="isWrite">true：写文件；false：不写文件；</param>
        </member>
        <member name="M:BC.BaseContext.Common.WritingFile.WritingText(System.String,System.String,System.String)">
            <summary>
            写文本(.txt)
            </summary>
            <param name="strPath">路径（最后加\\）</param>
            <param name="strFileFullName">文件名称(包括后缀)</param>
            <param name="strContent">内容</param>
        </member>
        <member name="T:BC.BaseContext.Concrete.DbContextBase">
            <summary>
            数据库操作基类
            </summary>
        </member>
        <member name="F:BC.BaseContext.Concrete.DbContextBase.connection">
            <summary>
            数据库连接接口
            </summary>
        </member>
        <member name="F:BC.BaseContext.Concrete.DbContextBase.command">
            <summary>
            数据库命令执行接口
            </summary>
        </member>
        <member name="F:BC.BaseContext.Concrete.DbContextBase.commandTimeOut">
            <summary>
            commandTimeOut
            </summary>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.#ctor(System.String,BC.BaseContext.Concrete.DbType,System.Int32)">
            <summary>
            有参构造函数（创建数据库连接对象）
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <param name="iCommandTimeOut">CommandTimeOut</param>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.BaseExecuteNonQuery(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,System.Action{System.Data.IDbCommand,BC.BaseContext.Common.ResultMessage},BC.BaseContext.Common.ResultMessage)">
            <summary>
            基本所有数据库（sqlserver,oracle,access）事务操作
            </summary>
            <param name="trans">事务对象</param>
            <param name="commandText">数据库操作字符</param>
            <param name="commandType">执行类型</param>
            <param name="parameters">添加数据参数</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <returns>是否操作成功</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.BaseExecuteScalar(System.String,System.Data.CommandType,System.Action{System.Data.IDbCommand,BC.BaseContext.Common.ResultMessage},BC.BaseContext.Common.ResultMessage)">
            <summary>
            得到数据库中表中第一行第一列的值
            </summary>
            <param name="commandText">数据库操作字符</param>
            <param name="commandType">执行类型</param>
            <param name="parameters">数据库参数</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <returns>结果</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.BaseExecuteDataReader(System.String,System.Data.CommandType,System.Action{System.Data.IDbCommand,BC.BaseContext.Common.ResultMessage},BC.BaseContext.Common.ResultMessage)">
            <summary>
            返回DataReader对象
            </summary>
            <param name="commandText">数据库操作字符</param>
            <param name="commandType">执行类型</param>
            <param name="parameters">数据库参数</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <returns>DataReader对象</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.BaseExecuteDataTable(System.String,System.Data.CommandType,BC.BaseContext.Concrete.DbType,BC.BaseContext.Common.ResultMessage,System.Func{System.Data.IDbDataParameter,System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            得到datatable
            </summary>
            <param name="commandText">数据库操作字符</param>
            <param name="commandType">执行类型</param>
            <param name="type">数据库类型(enum)</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="param">参数处理方法</param>
            <param name="parameters">数据库参数</param>
            <returns>返回dataTable</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.BaseExecuteDataSet(System.String,System.Data.CommandType,BC.BaseContext.Concrete.DbType,BC.BaseContext.Common.ResultMessage,System.Func{System.Data.IDbDataParameter,System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            得到dataSet
            </summary>
            <param name="commandText">数据库操作字符</param>
            <param name="commandType">执行类型</param>
            <param name="type">数据库类型(enum)</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="param">参数处理方法</param>
            <param name="parameters">数据库参数</param>
            <returns>返回dataSet</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.CreateDataTable(System.Data.IDataReader)">
            <summary>
            创建空表
            </summary>
            <param name="dataReader">数据库读接口</param>
            <returns>空DataTable</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.ConvertParameters(System.Func{System.Data.IDbDataParameter,System.String},System.Collections.Generic.Dictionary{System.String,System.Object},BC.BaseContext.Concrete.DbType,BC.BaseContext.Common.ResultMessage)">
            <summary>
            参数转换
            </summary>
            <param name="param">生成有用的SQL参数方法</param>
            <param name="parameters">参数</param>
            <param name="type">数据库类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <returns>处理过的参数集</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.ExtractMessage(BC.BaseContext.Concrete.Trans,System.String,BC.BaseContext.Common.ResultMessage,System.Action,System.Boolean)">
            <summary>
            提取返回信息
            </summary>
            <param name="trans">事务对象</param>
            <param name="commandText">执行语句</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="action">执行方法</param>
            <param name="isDataTable">是否为DataTable</param>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.DbHandle(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Concrete.ExecuteType,System.Action{System.Data.IDbCommand,BC.BaseContext.Common.ResultMessage},System.Action{System.Data.IDbCommand},BC.BaseContext.Common.ResultMessage)">
            <summary>
            数据库操作
            </summary>
            <param name="trans">事务对象</param>
            <param name="commandText">数据库操作字符</param>
            <param name="commandType">数据库类型</param>
            <param name="executeType">数据库执行类型</param>
            <param name="parameters">数据库参数</param>
            <param name="commandAction">操作方式</param>
            <param name="resultMessage">返回结果类</param>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.GetDbType(BC.BaseContext.Concrete.DbType)">
            <summary>
            *获取DbType
            </summary>
            <param name="type">DbType</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.OpenConnection">
            <summary>
            打开数据库
            </summary>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.CloseConnection">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="M:BC.BaseContext.Concrete.DbContextBase.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="P:BC.BaseContext.Concrete.DbContextBase.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:BC.BaseContext.Concrete.DbContextBase.Command">
            <summary>
            数据库命令执行对象
            </summary>
        </member>
        <member name="P:BC.BaseContext.Concrete.DbContextBase.DataAdapter">
            <summary>
            数据库适配器
            </summary>
        </member>
        <member name="P:BC.BaseContext.Concrete.DbContextBase.Parameter">
            <summary>
            数据库参数
            </summary>
        </member>
        <member name="T:BC.BaseContext.Concrete.Trans">
            <summary>
            事务类
            </summary>
        </member>
        <member name="M:BC.BaseContext.Concrete.Trans.#ctor(System.String,BC.BaseContext.Concrete.DbType)">
            <summary>
            *事务对象
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:BC.BaseContext.Concrete.Trans.Commit">
            <summary>
            事务提交
            </summary>
        </member>
        <member name="M:BC.BaseContext.Concrete.Trans.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:BC.BaseContext.Concrete.Trans.Dispose">
            <summary>
            释放事务
            </summary>
        </member>
        <member name="M:BC.BaseContext.Concrete.Trans.CloseConnection">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="P:BC.BaseContext.Concrete.Trans.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:BC.BaseContext.Concrete.Trans.Transaction">
            <summary>
            数据库事务对象
            </summary>
        </member>
        <member name="T:BC.BaseContext.Concrete.ExecuteType">
            <summary>
            数据库执行方式枚举
            </summary>
        </member>
        <member name="T:BC.BaseContext.Concrete.DbType">
            <summary>
            数据库类型枚举
            </summary>
        </member>
        <member name="F:BC.BaseContext.Concrete.DbType.Oracle">
            <summary>
            oracle
            </summary>
        </member>
        <member name="F:BC.BaseContext.Concrete.DbType.SqlServer">
            <summary>
            sqlserver
            </summary>
        </member>
        <member name="F:BC.BaseContext.Concrete.DbType.Access">
            <summary>
            Access
            </summary>
        </member>
        <member name="T:BC.BaseContext.Concrete.OracleContext">
            <summary>
            Oracle数据操作
            </summary>
        </member>
        <member name="M:BC.BaseContext.Concrete.OracleContext.#ctor(System.String,System.Int32)">
            <summary>
            Oracle构造函数 有参
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandTimeOut">commandTimeOut</param>
        </member>
        <member name="M:BC.BaseContext.Concrete.OracleContext.ExecuteNonQuery(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            执行insert,update,delete
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">操作类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.OracleContext.ExecuteReader(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            返回DataReader
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>返回DataReader对象</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.OracleContext.ExecuteScalar(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            得到数据库中表中第一行第一列的值
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.OracleContext.ExecuteDataTable(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            用DataReader返回DataTable
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>返回DataTable数据</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.OracleContext.ExecuteDataSet(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            用DataAdapater返回DataSet
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>返回DataSet数据</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.OracleContext.OracleParameter(System.Data.IDbDataParameter)">
            <summary>
            生成有用的SQL参数
            </summary>
            <param name="parameter">Db参数</param>
            <returns></returns>
        </member>
        <member name="T:BC.BaseContext.Concrete.SqlContext">
            <summary>
            Sqlserver 数据库操作类
            </summary>
        </member>
        <member name="M:BC.BaseContext.Concrete.SqlContext.#ctor(System.String,System.Int32)">
            <summary>
            Sqlserver构造函数 有参
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandTimeOut">commandTimeOut</param>
        </member>
        <member name="M:BC.BaseContext.Concrete.SqlContext.ExecuteNonQuery(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            执行insert,update,delete
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.SqlContext.ExecuteScalar(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            得到数据库中表中第一行第一列的值
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.SqlContext.ExecuteReader(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            返回DataReader
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>返回DataReader对象</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.SqlContext.ExecuteDataTable(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            用DataReader返回DataTable
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>返回DataTable数据</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.SqlContext.ExecuteDataSet(BC.BaseContext.Concrete.Trans,System.String,System.Data.CommandType,BC.BaseContext.Common.ResultMessage,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            用DataAdapater返回DataSet
            </summary>
            <param name="trans">事务类</param>
            <param name="commandText">执行语句</param>
            <param name="commandType">执行类型</param>
            <param name="resultMessage">返回结果类（debuggerSql,errorMessage,Status）</param>
            <param name="parameters">执行语句用的参数</param>
            <returns>返回DataSet数据</returns>
        </member>
        <member name="M:BC.BaseContext.Concrete.SqlContext.SqlParameter(System.Data.IDbDataParameter)">
            <summary>
            生成有用的SQL参数
            </summary>
            <param name="parameter">Db参数</param>
            <returns>string</returns>
        </member>
        <member name="T:BC.BaseContext.Data.DataAccess`1">
            <summary>
            实例数据类
            </summary>
            <typeparam name="T">接口对象</typeparam>
        </member>
        <member name="F:BC.BaseContext.Data.DataAccess`1.assemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="F:BC.BaseContext.Data.DataAccess`1.className">
            <summary>
            类名
            </summary>
        </member>
        <member name="M:BC.BaseContext.Data.DataAccess`1.CreateObject(System.String,BC.BaseContext.Concrete.DbType)">
            <summary>
            实例化对象
            </summary>
            <param name="connStr">connStr</param>
            <param name="dbType">dbType</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.DataAccess`1.GetClassName(BC.BaseContext.Concrete.DbType)">
            <summary>
            获取当前泛型类的命名空间+类名（重新组合）
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:BC.BaseContext.Data.DataParameter`1">
            <summary>
            操作数据参数类
            </summary>
            <typeparam name="Model">实体对象</typeparam>
        </member>
        <member name="M:BC.BaseContext.Data.DataParameter`1.AddParameter(`0)">
            <summary>
            通过实体对象来增加参数对象
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.DataParameter`1.AddParameter(`0,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            通过实体对象来增加参数对象（并把已经存在的参数合并成一个参数集合）
            </summary>
            <param name="model">实体对象</param>
            <param name="parameter">已经存在的参数</param>
            <returns></returns>
        </member>
        <member name="T:BC.BaseContext.Data.DataService`1">
            <summary>
            数据库操作主服务
            </summary>
            <typeparam name="Model">实体对象</typeparam>
        </member>
        <member name="F:BC.BaseContext.Data.DataService`1.context">
            <summary>
            数据库执行接口
            </summary>
        </member>
        <member name="F:BC.BaseContext.Data.DataService`1.commandText">
            <summary>
            数据操作命令文本的接口对象
            </summary>
        </member>
        <member name="M:BC.BaseContext.Data.DataService`1.#ctor(System.String,BC.BaseContext.Concrete.DbType)">
            <summary>
            构造函数实例化数据库(默认的CommandTimeOut:90000)
            </summary>
            <param name="connStr">链接字符串</param>
            <param name="dbType">数据库类型</param>
        </member>
        <member name="M:BC.BaseContext.Data.DataService`1.#ctor(System.String,BC.BaseContext.Concrete.DbType,System.Int32)">
            <summary>
            构造函数实例化数据库
            </summary>
            <param name="connStr">链接字符串</param>
            <param name="dbType">数据库类型</param>
            <param name="commandTimeOut">commandTimeOut</param>
        </member>
        <member name="P:BC.BaseContext.Data.DataService`1.Context">
            <summary>
            数据库操作接口对象
            </summary>
        </member>
        <member name="P:BC.BaseContext.Data.DataService`1.Connection">
            <summary>
            数据库连接接口对象
            </summary>
        </member>
        <member name="P:BC.BaseContext.Data.DataService`1.CommandText">
            <summary>
            数据操作命令文本的接口对象
            </summary>
        </member>
        <member name="T:BC.BaseContext.Data.TransScope">
            <summary>
            处理远程事务类（Oracle，Sql等联合事务）
            * 要开启服务器的分布式事务功能，不然无法使用此事务功能
            </summary>
        </member>
        <member name="F:BC.BaseContext.Data.TransScope.transactionScope">
            <summary>
            TransactionScope
            </summary>
        </member>
        <member name="M:BC.BaseContext.Data.TransScope.#ctor">
            <summary>
            TransScope
            </summary>
        </member>
        <member name="M:BC.BaseContext.Data.TransScope.#ctor(System.Transactions.TransactionOptions)">
            <summary>
            TransScope
            </summary>
            <param name="option">option</param>
        </member>
        <member name="M:BC.BaseContext.Data.TransScope.Complete">
            <summary>
            完成远程事务
            </summary>
        </member>
        <member name="M:BC.BaseContext.Data.TransScope.Dispose">
            <summary>
            释放远程事务
            </summary>
        </member>
        <member name="T:BC.BaseContext.Data.Text.ICommandText`1">
            <summary>
            文本命令接口对象
            </summary>
            <typeparam name="Model">实体对象（DataModel）</typeparam>
        </member>
        <member name="M:BC.BaseContext.Data.Text.ICommandText`1.SelectCommandText(`0)">
            <summary>
            Select文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.ICommandText`1.InsertCommandText(`0)">
            <summary>
            Insert文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.ICommandText`1.UpdateCommandText(`0)">
            <summary>
            Update文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.ICommandText`1.DeleteCommandText(`0)">
            <summary>
            Delete文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.ICommandText`1.InsertOrUpdateCommandText(`0,System.String)">
            <summary>
            InsertOrUpdate文本语句
            </summary>
            <param name="model">实体对象</param>
            <param name="selectWhere">查询时的Where部分，能产生唯一行(如: where ProcessId=@ProcessId)</param>
            <returns></returns>
        </member>
        <member name="T:BC.BaseContext.Data.Text.OracleCommandText`1">
            <summary>
            Oracle语句命令类
            </summary>
            <typeparam name="Model">实体对象（DataModel）</typeparam>
        </member>
        <member name="M:BC.BaseContext.Data.Text.OracleCommandText`1.SelectCommandText(`0)">
            <summary>
            Select文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.OracleCommandText`1.InsertCommandText(`0)">
            <summary>
            Insert文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.OracleCommandText`1.UpdateCommandText(`0)">
            <summary>
            Update文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.OracleCommandText`1.DeleteCommandText(`0)">
            <summary>
            Delete文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.OracleCommandText`1.InsertOrUpdateCommandText(`0,System.String)">
            <summary>
            InsertOrUpdate文本语句
            </summary>
            <param name="model">实体对象</param>
            <param name="selectWhere">查询时的Where部分，能产生唯一行(如: where ProcessId=@ProcessId)</param>
            <returns></returns>
        </member>
        <member name="T:BC.BaseContext.Data.Text.SqlCommandText`1">
            <summary>
            Sql语句命令类
            </summary>
            <typeparam name="Model">实体对象（DataModel）</typeparam>
        </member>
        <member name="M:BC.BaseContext.Data.Text.SqlCommandText`1.SelectCommandText(`0)">
            <summary>
            Select文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.SqlCommandText`1.InsertCommandText(`0)">
            <summary>
            Insert文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.SqlCommandText`1.UpdateCommandText(`0)">
            <summary>
            Update文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.SqlCommandText`1.DeleteCommandText(`0)">
            <summary>
            Delete文本语句
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.BaseContext.Data.Text.SqlCommandText`1.InsertOrUpdateCommandText(`0,System.String)">
            <summary>
            InsertOrUpdate文本语句
            </summary>
            <param name="model">实体对象</param>
            <param name="selectWhere">查询时的Where部分，能产生唯一行(如: where ProcessId=@ProcessId)</param>
            <returns></returns>
        </member>
        <member name="T:BC.BaseContext.Factory.CommandFactory">
            <summary>
            操作命令文本工厂
            </summary>
        </member>
        <member name="M:BC.BaseContext.Factory.CommandFactory.CreateCommandText``1(BC.BaseContext.Concrete.DbType)">
            <summary>
            创建相应的数据操作命令文本的实例
            </summary>
            <typeparam name="Model">实体对象</typeparam>
            <param name="type">数据库类型</param>
            <returns></returns>
        </member>
        <member name="T:BC.BaseContext.Factory.DbFactory">
            <summary>
            数据库创建工厂
            </summary>
        </member>
        <member name="M:BC.BaseContext.Factory.DbFactory.CreateDataBase(System.String,BC.BaseContext.Concrete.DbType,System.Int32)">
            <summary>
            创建相应的数据库实例
            </summary>
            <param name="connStr">链接字符串</param>
            <param name="type">数据类型</param>
            <param name="commandTimeOut">commandTimeOut</param>
            <returns>实数据库实例对象</returns>
        </member>
        <member name="M:BC.BaseContext.Factory.DbFactory.DataBase(System.String,BC.BaseContext.Concrete.DbType,System.Int32)">
            <summary>
            创建相应的数据库实例
            </summary>
            <param name="connStr">链接字符串</param>
            <param name="type">数据类型</param>
            <param name="commandTimeOut">commandTimeOut</param>
            <returns>实数据库实例对象</returns>
        </member>
        <member name="T:BC.BaseContext.JsLibrary.ReferenceClientScript">
            <summary>
            JS脚本注册类
            </summary>
        </member>
        <member name="M:BC.BaseContext.JsLibrary.ReferenceClientScript.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
    </members>
</doc>
